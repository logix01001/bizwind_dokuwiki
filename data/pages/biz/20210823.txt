====== UNDERSTANDING VAGRANT CHEF RUBY RBENV ======




vb.define => lalabas sa command line
vm.hostname => "develop.bems.biz"
vm.network :private_network, ip: "192"


config.vm.provision
unang gagawin

trigger.after :up => after up ng vagrant


sh file path
only store command line script

bash can handle conditional

nilagay lng sya sh


$1 = argument 1
$2 = argument 2

profile="$1"

system locale timezone

package_update
default.rb

**ITAMAE is to automate the provisioning the server**
ITAMAE also check if all cookbook was recipe

git commit in itamae

guest - virtual 
host - host computer


====== DATABASE CONCEPT ======


===== What Does Flat File Mean? =====

A **flat file database** is a collection of records in which the data follows a uniform format and follows rules on value types where applicable. The database is flat because every line only holds one data input, depending on the categorization of the columns.


{{:biz:flat-file_example.gif?800|}}

A **relational database** is a type of database that stores and provides access to data points that are related to one another. Relational databases are based on the relational model, an intuitive, straightforward way of representing data in tables. In a relational database, each row in the table is a record with a unique ID called the key. The columns of the table hold attributes of the data, and each record usually has a value for each attribute, making it easy to establish the relationships among data points.

{{:biz:relational_database_example.gif?800|}}


**Primary Key:**
A primary key is used to ensure data in the specific column is unique. It is a column cannot have NULL values. It is either an existing table column or a column that is specifically generated by the database according to a defined sequence.

**Foreign Key:**
A foreign key is a column or group of columns in a relational database table that provides a link between data in two tables. It is a column (or columns) that references a column (most often the primary key) of another table.

{{:biz:foreign-key-in-dbms3.png?800|}}


===== Constraints in DBMS =====


  * Relational constraints are the restrictions imposed on the database contents and operations.
  * They ensure the correctness of data in the database.

==== Type constraint ====

  * Domain constraint
  * Tuple Uniqueness constraint
  * Key constraint
  * Entity Integrity constraint
  * Referential Integrity constraint

==== Domain Constraint- ====

Domain constraint defines the domain or set of values for an attribute.
It specifies that the value taken by the attribute must be the atomic value from its domain.


==== Tuple Uniqueness Constraint ====

Tuple Uniqueness constraint specifies that all the tuples must be necessarily unique in any relation.

==== Key Constraint- ====

  * All the values of primary key must be unique.
  * The value of primary key must not be null.

==== Entity Integrity Constraint- ====

  * Entity integrity constraint specifies that no attribute of primary key must contain a null value in any relation.
  * This is because the presence of null value in the primary key violates the uniqueness property.

==== Referential Integrity Constraint- ====
  * This constraint is enforced when a foreign key references the primary key of a relation.
  * It specifies that all the values taken by the foreign key must either be available in the relation of the primary key or be null.


Constraints are the rules enforced on the data columns of a table. These are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the database.

Constraints could be either on a column level or a table level. The column level constraints are applied only to one column, whereas the table level constraints are applied to the whole table.

Following are some of the most commonly used constraints available in SQL. These constraints have already been discussed in SQL - RDBMS Concepts chapter, but it’s worth to revise them at this point.

  * **NOT NULL Constraint** − Ensures that a column cannot have NULL value.
  * **DEFAULT Constraint** − Provides a default value for a column when none is specified.
  * **UNIQUE Constraint** − Ensures that all values in a column are different.
  * **PRIMARY Key** − Uniquely identifies each row/record in a database table.
  * **FOREIGN Key** − Uniquely identifies a row/record in any of the given database table.
  * **CHECK Constraint** − The CHECK constraint ensures that all the values in a column satisfies certain conditions.
  * **INDEX** − Used to create and retrieve data from the database very quickly.






