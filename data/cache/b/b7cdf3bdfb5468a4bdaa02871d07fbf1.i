a:339:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"TEST-DRIVEN JAVA DEVELOPMENT";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:45;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:59:"Chapter 1. Why Should I Care for Test-driven Development?";i:1;i:2;i:2;i:45;}i:2;i:45;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:45;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:118;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"Red-green-refactorRed-green-refactor";i:1;i:2;i:2;i:118;}i:2;i:118;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:118;}i:9;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:166;}i:10;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:166;}i:11;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:166;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Write a test.";}i:2;i:170;}i:13;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:184;}i:14;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:184;}i:15;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:184;}i:16;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:184;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Run all tests.";}i:2;i:188;}i:18;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:203;}i:19;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:203;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:203;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:203;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" Write the implementation code.";}i:2;i:207;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:238;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:238;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:238;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:238;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Run all tests.";}i:2;i:242;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:257;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:257;}i:30;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:257;}i:31;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:257;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Refactor.";}i:2;i:261;}i:33;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:271;}i:34;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:271;}i:35;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:271;}i:36;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:271;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Run all tests.";}i:2;i:275;}i:38;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:290;}i:39;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:290;}i:40;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:290;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:290;}i:42;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:292;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:154:"While writing tests, we are in the red state. When the implementation of a test is finished, all tests should pass and then we will be in the green state.";}i:2;i:294;}i:44;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:448;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:450;}i:46;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:452;}i:47;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Speed is the key";i:1;i:2;i:2;i:452;}i:2;i:452;}i:48;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:452;}i:49;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:452;}i:50;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:482;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Write a short test and run all ";}i:2;i:484;}i:52;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:515;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"tests (ping)";}i:2;i:517;}i:54;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:529;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:", write the implementation and run all ";}i:2;i:531;}i:56;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:570;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"tests (pong)";}i:2;i:572;}i:58;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:584;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:", write another ";}i:2;i:586;}i:60;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:602;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"test (ping)";}i:2;i:604;}i:62;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:615;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:", write implementation of that ";}i:2;i:617;}i:64;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:648;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"test (pong)";}i:2;i:650;}i:66;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:661;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:169:", refactor and confirm that all tests are passing (score), and then repeat—ping, pong, ping, pong, ping, pong, score, serve again. Do not try to make the perfect code.";}i:2;i:663;}i:68;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:832;}i:69;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:834;}i:70;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:836;}i:71;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"It's not about testing";i:1;i:2;i:2;i:836;}i:2;i:836;}i:72;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:836;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:836;}i:74;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:873;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:"T in TDD is often misunderstood. Test-driven development is the way we approach the design";}i:2;i:875;}i:76;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:965;}i:77;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:967;}i:78;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:967;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"It is the way to focus on requirements and implementation of just one thing at a time—organize your thoughts and better structure the code";}i:2;i:969;}i:80;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1109;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1109;}i:82;a:3:{i:0;s:14:"monospace_open";i:1;a:0:{}i:2;i:1111;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"The main objective of test-driven development is testable code design with tests as a very useful side product.";}i:2;i:1113;}i:84;a:3:{i:0;s:15:"monospace_close";i:1;a:0:{}i:2;i:1224;}i:85;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1226;}i:86;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1229;}i:87;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Testing";i:1;i:2;i:2;i:1229;}i:2;i:1229;}i:88;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1229;}i:89;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1250;}i:90;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"The black-box testing";i:1;i:3;i:2;i:1250;}i:2;i:1250;}i:91;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1250;}i:92;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1250;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:"Black-box testing (also known as functional testing) treats software under test as a black-box without knowing its internals. Tests use software interfaces and try to ensure that they work as expected";}i:2;i:1283;}i:94;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1483;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1483;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Advantage";}i:2;i:1485;}i:97;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1494;}i:98;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1494;}i:99;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1494;}i:100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1494;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" Efficient for large segments of code";}i:2;i:1498;}i:102;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1535;}i:103;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1535;}i:104;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1535;}i:105;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1535;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" Code access, understanding the code, and ability to code are not required";}i:2;i:1539;}i:107;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1613;}i:108;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1613;}i:109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1613;}i:110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1613;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" Separation between user's and developer's perspectives";}i:2;i:1617;}i:112;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1672;}i:113;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1672;}i:114;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1672;}i:115;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1672;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Disadvantage";}i:2;i:1674;}i:117;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1686;}i:118;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1686;}i:119;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1686;}i:120;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1686;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" Limited coverage, since only a fraction of test scenarios is performed";}i:2;i:1690;}i:122;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1761;}i:123;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1761;}i:124;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1761;}i:125;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1761;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" Inefficient testing due to tester's lack of knowledge about software internals";}i:2;i:1765;}i:127;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1844;}i:128;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1844;}i:129;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1844;}i:130;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1844;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" Blind coverage, since tester has limited knowledge about the application ";}i:2;i:1848;}i:132;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1922;}i:133;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1922;}i:134;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1922;}i:135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1922;}i:136;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1925;}i:137;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:1927;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"“Automated black-box testing relies on some form of automation such as behavior-driven development (BDD).”";}i:2;i:1929;}i:139;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:2039;}i:140;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2041;}i:141;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2043;}i:142;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2046;}i:143;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Mocking";i:1;i:3;i:2;i:2046;}i:2;i:2046;}i:144;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2046;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2046;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:"What is the common way to test code that uses external resources or third-party libraries? Mocks are the answer. A mock object, or simply a mock, is a simulated object that can be used to replace real ones. They are very useful when objects that depend on external resources are deprived of them.";}i:2;i:2064;}i:147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2360;}i:148;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2362;}i:149;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Chapter 2";i:1;i:2;i:2;i:2362;}i:2;i:2362;}i:150;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2362;}i:151;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2386;}i:152;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Maven & Gradle";i:1;i:3;i:2;i:2386;}i:2;i:2386;}i:153;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2386;}i:154;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2412;}i:155;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:50:"Hamcrest, Assertj, Junit (Unit Testing Frameworks)";i:1;i:3;i:2;i:2412;}i:2;i:2412;}i:156;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2412;}i:157;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2474;}i:158;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Code Coverage";i:1;i:3;i:2;i:2474;}i:2;i:2474;}i:159;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2474;}i:160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2474;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"Percentage of code covered in test";}i:2;i:2498;}i:162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2532;}i:163;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2532;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"the higher coverage percent the more code automated test";}i:2;i:2534;}i:165;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2591;}i:166;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2591;}i:167;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2591;}i:168;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2591;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" JaCoCo (Java Code Coverage)";}i:2;i:2595;}i:170;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2623;}i:171;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2623;}i:172;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2623;}i:173;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2623;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"client coordination if not meet the percentage";}i:2;i:2625;}i:175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2671;}i:176;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2673;}i:177;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"MOCKING FRAMEWORK";i:1;i:3;i:2;i:2673;}i:2;i:2673;}i:178;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2673;}i:179;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2673;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"Help to create database record as MOCK or fake";}i:2;i:2701;}i:181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2748;}i:182;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2748;}i:183;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2748;}i:184;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2748;}i:185;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Mockito";}i:2;i:2752;}i:186;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2760;}i:187;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2760;}i:188;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2760;}i:189;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2760;}i:190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" EasyMock";}i:2;i:2764;}i:191;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2773;}i:192;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2773;}i:193;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2773;}i:194;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2775;}i:195;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"User interface testing";i:1;i:3;i:2;i:2775;}i:2;i:2775;}i:196;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2775;}i:197;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2808;}i:198;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2808;}i:199;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2808;}i:200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Selenium";}i:2;i:2812;}i:201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2821;}i:202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2821;}i:203;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2821;}i:204;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2821;}i:205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Selenide";}i:2;i:2825;}i:206;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2834;}i:207;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2834;}i:208;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2834;}i:209;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2836;}i:210;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"BDD Framework";i:1;i:3;i:2;i:2836;}i:2;i:2836;}i:211;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2836;}i:212;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2860;}i:213;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2860;}i:214;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2860;}i:215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" JBehave";}i:2;i:2864;}i:216;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2872;}i:217;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2872;}i:218;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2872;}i:219;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2872;}i:220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" cucumber";}i:2;i:2876;}i:221;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2885;}i:222;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2885;}i:223;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2885;}i:224;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2887;}i:225;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:74:"“Chapter 5. Design – If It's Not Testable, It's Not Designed Well”";i:1;i:2;i:2;i:2887;}i:2;i:2887;}i:226;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:2887;}i:227;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2975;}i:228;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"“Why should we care about design?”";i:1;i:3;i:2;i:2975;}i:2;i:2975;}i:229;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2975;}i:230;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3026;}i:231;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Design principles";i:1;i:2;i:2;i:3026;}i:2;i:3026;}i:232;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3026;}i:233;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3026;}i:234;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3058;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:278:"The TDD philosophy encourages programmers to follow some principles and good practices that make code cleaner and more readable As a result, our code becomes easy to understand and safe to modify in the future. Let's take a look at some of the basic software design principles. ";}i:2;i:3060;}i:236;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3338;}i:237;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3340;}i:238;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3342;}i:239;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"You Ain't Gonna Need It";i:1;i:3;i:2;i:3342;}i:2;i:3342;}i:240;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3342;}i:241;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3342;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"YAGNI is the acronym for the You Ain't Gonna Need It principle. It aims to erase all unnecessary code and focuses on the current functionalities, not the future ones.";}i:2;i:3377;}i:243;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3543;}i:244;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3545;}i:245;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Don't Repeat Yourself";i:1;i:3;i:2;i:3545;}i:2;i:3545;}i:246;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3545;}i:247;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3545;}i:248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"The idea behind the Don't Repeat Yourself (DRY) principle is to reuse the code you previously wrote instead of repeating it.";}i:2;i:3578;}i:249;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3702;}i:250;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3704;}i:251;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Keep It Simple, Stupid";i:1;i:3;i:2;i:3704;}i:2;i:3704;}i:252;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3704;}i:253;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3704;}i:254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"This principle has the confusing acronym of ";}i:2;i:3738;}i:255;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"KISS";}i:2;i:3782;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" and states that things perform their function better if they are kept simple rather than complicated.";}i:2;i:3786;}i:257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3888;}i:258;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3890;}i:259;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Occam's Razor";i:1;i:3;i:2;i:3890;}i:2;i:3890;}i:260;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3890;}i:261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3890;}i:262;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:3915;}i:263;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"When you have two competing solutions to the same problem, the simpler one is the better.";}i:2;i:3917;}i:264;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4006;}i:265;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4008;}i:266;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4011;}i:267;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:5:"SOLID";i:1;i:3;i:2;i:4011;}i:2;i:4011;}i:268;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4011;}i:269;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4011;}i:270;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:240:"The word SOLID is an acronym invented by Robert C. Martin for the five basic principles of object-oriented programming. By following these five principles, a developer is more likely to create a great, durable, and maintainable application:";}i:2;i:4028;}i:271;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4269;}i:272;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4269;}i:273;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4269;}i:274;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4269;}i:275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4273;}i:276;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4274;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Single Responsibility Principle";}i:2;i:4276;}i:278;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4307;}i:279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:": A class should have only a single reason to change.";}i:2;i:4309;}i:280;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4362;}i:281;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4362;}i:282;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4362;}i:283;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4362;}i:284;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4366;}i:285;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4367;}i:286;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"Open-Closed Principle";}i:2;i:4369;}i:287;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4390;}i:288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:": A class should be open for extension and closed for modification. This is attributed to Bertrand Meyer.";}i:2;i:4392;}i:289;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4497;}i:290;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4497;}i:291;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4497;}i:292;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4497;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4501;}i:294;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4502;}i:295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"Liskov Substitution Principle";}i:2;i:4504;}i:296;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4533;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:": This was created by Barbara Liskov, and she says a class should be replaceable by others that extend that class.";}i:2;i:4535;}i:298;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4649;}i:299;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4649;}i:300;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4649;}i:301;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4649;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4653;}i:303;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4654;}i:304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"Interface Segregation Principle";}i:2;i:4656;}i:305;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4687;}i:306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:": A few specific interfaces are preferable than one general-purpose interface.";}i:2;i:4689;}i:307;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4767;}i:308;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4767;}i:309;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4767;}i:310;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4767;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4771;}i:312;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4772;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"Dependency Inversion Principle";}i:2;i:4774;}i:314;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4804;}i:315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:": A class should depend on abstraction instead of implementation. This means that ";}i:2;i:4806;}i:316;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4888;}i:317;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4888;}i:318;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4888;}i:319;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4891;}i:320;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:55:"Chapter 6. Mocking – Removing External Dependencies";i:1;i:3;i:2;i:4891;}i:2;i:4891;}i:321;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4891;}i:322;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4891;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"TDD is about speed. We want to quickly demonstrate whether some idea, concept, or implementation, is valid or not. Further on, we want to run all tests fast.";}i:2;i:4958;}i:324;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5115;}i:325;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5115;}i:326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Regression bug";}i:2;i:5120;}i:327;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5134;}i:328;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5134;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"Challenge before
kapag natapos ang project at may additional d namin sire kung may maapektuhan at yun yung regression bug";}i:2;i:5136;}i:330;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5257;}i:331;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5257;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:"na practice TDD 
assurance may functionality
tama kaya wala maapektuhan
run a test unit test integration test";}i:2;i:5260;}i:333;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5369;}i:334;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5369;}i:335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"Functional and end to end;";}i:2;i:5371;}i:336;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5397;}i:337;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5400;}i:338;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:5400;}}