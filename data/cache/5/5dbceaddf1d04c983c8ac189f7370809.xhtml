
<h1 class="sectionedit1" id="understanding_vagrant_chef_ruby_rbenv">UNDERSTANDING VAGRANT CHEF RUBY RBENV</h1>
<div class="level1">

<p>
vb.define ⇒ lalabas sa command line
vm.hostname ⇒ “develop.bems.biz”
vm.network :private_network, ip: “192”
</p>

<p>
config.vm.provision
unang gagawin
</p>

<p>
trigger.after :up ⇒ after up ng vagrant
</p>

<p>
sh file path
only store command line script
</p>

<p>
bash can handle conditional
</p>

<p>
nilagay lng sya sh
</p>

<p>
$1 = argument 1
$2 = argument 2
</p>

<p>
profile=“$1”
</p>

<p>
system locale timezone
</p>

<p>
package_update
default.rb
</p>

<p>
<strong>ITAMAE is to automate the provisioning the server</strong>
ITAMAE also check if all cookbook was recipe
</p>

<p>
git commit in itamae
</p>

<p>
guest - virtual 
host - host computer
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;UNDERSTANDING VAGRANT CHEF RUBY RBENV&quot;,&quot;hid&quot;:&quot;understanding_vagrant_chef_ruby_rbenv&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-601&quot;} -->
<h1 class="sectionedit2" id="database_concept">DATABASE CONCEPT</h1>
<div class="level1">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;DATABASE CONCEPT&quot;,&quot;hid&quot;:&quot;database_concept&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;602-634&quot;} -->
<h2 class="sectionedit3" id="what_does_flat_file_mean">What Does Flat File Mean?</h2>
<div class="level2">

<p>
A <strong>flat file database</strong> is a collection of records in which the data follows a uniform format and follows rules on value types where applicable. The database is flat because every line only holds one data input, depending on the categorization of the columns.
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=biz%3A20210823&amp;media=biz:flat-file_example.gif" class="media" title="biz:flat-file_example.gif"><img src="/dokuwiki/lib/exe/fetch.php?w=800&amp;tok=fd61ef&amp;media=biz:flat-file_example.gif" class="media" alt="" width="800" /></a>
</p>

<p>
A <strong>relational database</strong> is a type of database that stores and provides access to data points that are related to one another. Relational databases are based on the relational model, an intuitive, straightforward way of representing data in tables. In a relational database, each row in the table is a record with a unique ID called the key. The columns of the table hold attributes of the data, and each record usually has a value for each attribute, making it easy to establish the relationships among data points.
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=biz%3A20210823&amp;media=biz:relational_database_example.gif" class="media" title="biz:relational_database_example.gif"><img src="/dokuwiki/lib/exe/fetch.php?w=800&amp;tok=21443e&amp;media=biz:relational_database_example.gif" class="media" alt="" width="800" /></a>
</p>

<p>
<strong>Primary Key:</strong>
A primary key is used to ensure data in the specific column is unique. It is a column cannot have NULL values. It is either an existing table column or a column that is specifically generated by the database according to a defined sequence.
</p>

<p>
<strong>Foreign Key:</strong>
A foreign key is a column or group of columns in a relational database table that provides a link between data in two tables. It is a column (or columns) that references a column (most often the primary key) of another table.
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=biz%3A20210823&amp;media=biz:foreign-key-in-dbms3.png" class="media" title="biz:foreign-key-in-dbms3.png"><img src="/dokuwiki/lib/exe/fetch.php?w=800&amp;tok=065b42&amp;media=biz:foreign-key-in-dbms3.png" class="media" alt="" width="800" /></a>
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;What Does Flat File Mean?&quot;,&quot;hid&quot;:&quot;what_does_flat_file_mean&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;635-2084&quot;} -->
<h2 class="sectionedit4" id="constraints_in_dbms">Constraints in DBMS</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Relational constraints are the restrictions imposed on the database contents and operations.</div>
</li>
<li class="level1"><div class="li"> They ensure the correctness of data in the database.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Constraints in DBMS&quot;,&quot;hid&quot;:&quot;constraints_in_dbms&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;2085-2273&quot;} -->
<h3 class="sectionedit5" id="type_constraint">Type constraint</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> Domain constraint</div>
</li>
<li class="level1"><div class="li"> Tuple Uniqueness constraint</div>
</li>
<li class="level1"><div class="li"> Key constraint</div>
</li>
<li class="level1"><div class="li"> Entity Integrity constraint</div>
</li>
<li class="level1"><div class="li"> Referential Integrity constraint</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Type constraint&quot;,&quot;hid&quot;:&quot;type_constraint&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;2274-2443&quot;} -->
<h3 class="sectionedit6" id="domain_constraint">Domain Constraint-</h3>
<div class="level3">

<p>
Domain constraint defines the domain or set of values for an attribute.
It specifies that the value taken by the attribute must be the atomic value from its domain.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Domain Constraint-&quot;,&quot;hid&quot;:&quot;domain_constraint&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:6,&quot;range&quot;:&quot;2444-2640&quot;} -->
<h3 class="sectionedit7" id="tuple_uniqueness_constraint">Tuple Uniqueness Constraint</h3>
<div class="level3">

<p>
Tuple Uniqueness constraint specifies that all the tuples must be necessarily unique in any relation.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Tuple Uniqueness Constraint&quot;,&quot;hid&quot;:&quot;tuple_uniqueness_constraint&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:7,&quot;range&quot;:&quot;2641-2782&quot;} -->
<h3 class="sectionedit8" id="key_constraint">Key Constraint-</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> All the values of primary key must be unique.</div>
</li>
<li class="level1"><div class="li"> The value of primary key must not be null.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Key Constraint-&quot;,&quot;hid&quot;:&quot;key_constraint&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:8,&quot;range&quot;:&quot;2783-2907&quot;} -->
<h3 class="sectionedit9" id="entity_integrity_constraint">Entity Integrity Constraint-</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> Entity integrity constraint specifies that no attribute of primary key must contain a null value in any relation.</div>
</li>
<li class="level1"><div class="li"> This is because the presence of null value in the primary key violates the uniqueness property.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Entity Integrity Constraint-&quot;,&quot;hid&quot;:&quot;entity_integrity_constraint&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:9,&quot;range&quot;:&quot;2908-3166&quot;} -->
<h3 class="sectionedit10" id="referential_integrity_constraint">Referential Integrity Constraint-</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> This constraint is enforced when a foreign key references the primary key of a relation.</div>
</li>
<li class="level1"><div class="li"> It specifies that all the values taken by the foreign key must either be available in the relation of the primary key or be null.</div>
</li>
</ul>

<p>
Constraints are the rules enforced on the data columns of a table. These are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the database.
</p>

<p>
Constraints could be either on a column level or a table level. The column level constraints are applied only to one column, whereas the table level constraints are applied to the whole table.
</p>

<p>
Following are some of the most commonly used constraints available in SQL. These constraints have already been discussed in SQL - RDBMS Concepts chapter, but it’s worth to revise them at this point.
</p>
<ul>
<li class="level1"><div class="li"> <strong>NOT NULL Constraint</strong> − Ensures that a column cannot have NULL value.</div>
</li>
<li class="level1"><div class="li"> <strong>DEFAULT Constraint</strong> − Provides a default value for a column when none is specified.</div>
</li>
<li class="level1"><div class="li"> <strong>UNIQUE Constraint</strong> − Ensures that all values in a column are different.</div>
</li>
<li class="level1"><div class="li"> <strong>PRIMARY Key</strong> − Uniquely identifies each row/record in a database table.</div>
</li>
<li class="level1"><div class="li"> <strong>FOREIGN Key</strong> − Uniquely identifies a row/record in any of the given database table.</div>
</li>
<li class="level1"><div class="li"> <strong>CHECK Constraint</strong> − The CHECK constraint ensures that all the values in a column satisfies certain conditions.</div>
</li>
<li class="level1"><div class="li"> <strong>INDEX</strong> − Used to create and retrieve data from the database very quickly.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Referential Integrity Constraint-&quot;,&quot;hid&quot;:&quot;referential_integrity_constraint&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:10,&quot;range&quot;:&quot;3167-&quot;} -->